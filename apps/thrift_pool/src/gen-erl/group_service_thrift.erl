%%
%% Autogenerated by Thrift Compiler (0.11.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(group_service_thrift).
-behaviour(thrift_service).


-include("group_service_thrift.hrl").

-export([struct_info/1, function_info/2, function_names/0]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% getGroupMembers(This, GroupId)
function_info('getGroupMembers', params_type) ->
  {struct, [{1, i64}]}
;
function_info('getGroupMembers', reply_type) ->
  {list, i64};
function_info('getGroupMembers', exceptions) ->
  {struct, [{1, {struct, {'group_service_types', 'GroupException'}}}]}
;
% getGroupMsgBlocks(This, GroupId)
function_info('getGroupMsgBlocks', params_type) ->
  {struct, [{1, i64}]}
;
function_info('getGroupMsgBlocks', reply_type) ->
  {list, i64};
function_info('getGroupMsgBlocks', exceptions) ->
  {struct, [{1, {struct, {'group_service_types', 'GroupException'}}}]}
;
% getGroupApnsBlocks(This, GroupId)
function_info('getGroupApnsBlocks', params_type) ->
  {struct, [{1, i64}]}
;
function_info('getGroupApnsBlocks', reply_type) ->
  {list, {struct, {'group_service_types', 'ApnsBlockConfig'}}};
function_info('getGroupApnsBlocks', exceptions) ->
  {struct, [{1, {struct, {'group_service_types', 'GroupException'}}}]}
;
% getGroupRoles(This, GroupId, Role)
function_info('getGroupRoles', params_type) ->
  {struct, [{1, i64},
          {2, string}]}
;
function_info('getGroupRoles', reply_type) ->
  {list, i64};
function_info('getGroupRoles', exceptions) ->
  {struct, [{1, {struct, {'group_service_types', 'GroupException'}}}]}
;
% getGroupMemberCount(This, GroupId)
function_info('getGroupMemberCount', params_type) ->
  {struct, [{1, i64}]}
;
function_info('getGroupMemberCount', reply_type) ->
  i32;
function_info('getGroupMemberCount', exceptions) ->
  {struct, [{1, {struct, {'group_service_types', 'GroupException'}}}]}
;
% isGroupMember(This, GroupId, UserId)
function_info('isGroupMember', params_type) ->
  {struct, [{1, i64},
          {2, i64}]}
;
function_info('isGroupMember', reply_type) ->
  bool;
function_info('isGroupMember', exceptions) ->
  {struct, [{1, {struct, {'group_service_types', 'GroupException'}}}]}
;
% isUserMuted(This, GroupId, UserId)
function_info('isUserMuted', params_type) ->
  {struct, [{1, i64},
          {2, i64}]}
;
function_info('isUserMuted', reply_type) ->
  bool;
function_info('isUserMuted', exceptions) ->
  {struct, [{1, {struct, {'group_service_types', 'GroupException'}}}]}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

function_names() -> 
  ['getGroupMembers', 'getGroupMsgBlocks', 'getGroupApnsBlocks', 'getGroupRoles', 'getGroupMemberCount', 'isGroupMember', 'isUserMuted'].

